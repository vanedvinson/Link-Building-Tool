
<!--
    THIS IS NOT THE LOGIN PAGE
    THIS HAS TO BE DELETED
-->
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using SystemDuo.Core.Services
@using SystemDuo.Core.Dto
@using SystemDuo.Helpers
@using SystemDuo.Core.Services.Abstractions
@layout LoginLayout
@inject NavigationManager navigationManager;
@inject SignInManager<User> signInManager;
@inject UserManager<User> userManager;
@inject IServiceManager serviceManager;
@inject TokenStorage tokenStorage;
@inject ProtectedLocalStorage storage;

<MudPaper Class="py-1 px-3 " Style="height:100vh;  background-color:#0E363C ">
    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="3" Style="height:80vh;">
        
        <MudImage Src="images/logo.png" Alt="Logo" Elevation="0" />
        
        <MudPaper Style="border-radius:30px;" Elevation="0">
            <EditForm Model="_userForAuthentication"  OnValidSubmit="ExecuteLogin"  style="align-items:center; display:flex; flex-direction:column;">
            <DataAnnotationsValidator />
                <div Style="width:400px;margin:15px" class="wrap-login100" Elevation="0">
                <div>
                    <div style="padding:16px">
                        <MudText Typo="Typo.h6">Login</MudText>
                    </div>
                </div>
                    <div Style="padding-left: 16px;padding-right: 16px;">
                        <p style="padding-top:16px; margin:0px; font-weight:bold">Email / Username</p>
                        <MudTextField  Style="border-radius: 45px;" Variant="Variant.Outlined" Class="rounded-xl" Placeholder="E-Mail..." @bind-Value="_userForAuthentication.Email" For="@(() => _userForAuthentication.Email)" />
                        <p style="padding-top:16px;margin:0px;font-weight:bold">Password</p>
                        <MudTextField Variant="Variant.Outlined" Placeholder="Password..."
                                      @bind-Value="_userForAuthentication.Password" For="@(() => _userForAuthentication.Password)" InputType="InputType.Password" />

                        <p style="padding-top:16px;color:#5CAFE1; cursor: pointer;font-weight:bold" @onclick="OpenForgotPasswordPage">Forgot your password?</p>
                    </div>
                    <MudCardActions Style="display:flex; flex-direction:column;padding:16px">
                        <MudButton @onclick="ExecuteLogin" Style="width: 100%;" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">Log In ></MudButton>
                     </MudCardActions>
                </div>

            </EditForm>
        </MudPaper>
    </MudStack>
</MudPaper>
 


@code{
    private LoginDto _userForAuthentication = new LoginDto();
    public bool ShowAuthError { get; set; }
    public string? Error { get; set; }

    private async Task ExecuteLogin()
    {

        var login = await serviceManager.UserService.Login(_userForAuthentication);

        if (login.IsAuthenticated)
        {
            await tokenStorage!.SetTokensAsync(login.AccessToken,login.RefreshToken);
            await storage!.SetAsync("Name", login.Name);
            await storage!.SetAsync("Surname", login.Surname);
            navigationManager!.NavigateTo("/dashboard", true);
                }
          
     }  
    public void OpenForgotPasswordPage()
    {
        navigationManager.NavigateTo("forgot-password");
    }

    public class UserForAuthenticationDto
    {
        public string Email { get; set; }
        public string Password{ get; set; }

    }
}