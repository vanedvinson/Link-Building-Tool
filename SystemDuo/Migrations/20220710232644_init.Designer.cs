// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SystemDuo.Core.Persistence;

#nullable disable

namespace SystemDuo.Migrations
{
    [DbContext(typeof(RepositoryDbContext))]
    [Migration("20220710232644_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.ApplicantSkills", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("CandidateSkills");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAcceptedForInterview")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRequestFromAgent")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("char(36)");

                    b.Property<string>("RejectReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.ApplicationComments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationComments");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3712a212-2d9a-4253-b62c-77770907003f"),
                            CreatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(717),
                            Name = "IT",
                            UpdatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(717)
                        },
                        new
                        {
                            Id = new Guid("e6e24a2c-0ada-4aa4-8bf7-de37c958dc3c"),
                            CreatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(719),
                            Name = "Medicine",
                            UpdatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(719)
                        });
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("LongTerm")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("OpenPositionNumber")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("ShortTerm")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b4c0f34-07f9-4ea5-9837-457f2d3962f1"),
                            CategoryId = new Guid("3712a212-2d9a-4253-b62c-77770907003f"),
                            CreatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(866),
                            DeletedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(872),
                            LocationId = new Guid("3712a212-2d9a-4253-b62c-77770907003f"),
                            LongTerm = true,
                            Name = "Zulke",
                            OpenPositionNumber = 0,
                            ShortTerm = false,
                            UpdatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(866)
                        },
                        new
                        {
                            Id = new Guid("a0c43775-83e8-4c28-9450-2e3c0b20325a"),
                            CategoryId = new Guid("3712a212-2d9a-4253-b62c-77770907003f"),
                            CreatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(874),
                            DeletedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(876),
                            LocationId = new Guid("3712a212-2d9a-4253-b62c-77770907003f"),
                            LongTerm = true,
                            Name = "Levi9",
                            OpenPositionNumber = 0,
                            ShortTerm = false,
                            UpdatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(875)
                        });
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.Documents", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.EmployeeJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("JobId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeJobs");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.EmployeeRecension", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("JobId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Recension")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("JobId");

                    b.ToTable("EmployeeRecensions");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AssignedToId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("EducationLevel")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExperienceLevel")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JobLocation")
                        .HasColumnType("longtext");

                    b.Property<string>("Language")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LocationId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.JobSkills", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("JobId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("SkillId");

                    b.ToTable("JobsSkills");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3712a212-2d9a-4253-b62c-77770907003f"),
                            Address = "Avnoja bb",
                            City = "Novi Pazar",
                            Country = "Serbia",
                            CreatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(946),
                            PostalCode = "33600",
                            UpdatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(946)
                        });
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9a2817b4-8181-437b-afea-ee1daff707b4",
                            ConcurrencyStamp = "9a8b07b7-4a4e-45ea-adb7-d7479104db79",
                            Name = "Candidate",
                            NormalizedName = "CANDIDATE",
                            Type = "extern"
                        },
                        new
                        {
                            Id = "578861f8-d0a3-4a8a-81f5-488b37fdf204",
                            ConcurrencyStamp = "e5f5627d-096c-48de-bf87-273be58320c0",
                            Name = "Senior Agent",
                            NormalizedName = "SENIOR AGENT",
                            Type = "intern"
                        },
                        new
                        {
                            Id = "c3d77b2f-6f66-4681-9f54-fc746f48d669",
                            ConcurrencyStamp = "1d501d7e-7d5c-4c06-8b03-20a63a9ec669",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            Type = "intern"
                        },
                        new
                        {
                            Id = "488b094c-65cf-43b7-a8e6-d2be36286c6a",
                            ConcurrencyStamp = "60134020-5ac4-4de4-8b71-5ebc0a17035c",
                            Name = "Junior Agent",
                            NormalizedName = "JUNIOR AGENT",
                            Type = "intern"
                        });
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.Skills", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20b7733c-3e8b-4e6e-92dd-dad6077e6165"),
                            CreatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(783),
                            Name = "C#",
                            UpdatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(783)
                        },
                        new
                        {
                            Id = new Guid("5c0a6417-482b-46ad-8a48-8e036660379c"),
                            CreatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(796),
                            Name = "Java",
                            UpdatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(796)
                        },
                        new
                        {
                            Id = new Guid("a85e08fe-a675-4be2-9101-81ebd1a756a6"),
                            CreatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(797),
                            Name = "Angular",
                            UpdatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(798)
                        });
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Education")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("EmailConfirmationToken")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Language")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("LongTerm")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext");

                    b.Property<string>("Profession")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("ShortTerm")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "eb963452-683c-40be-8777-97d5a90792a1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01857fe8-8f08-48e8-8256-effc704d527b",
                            CreatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(511),
                            Email = "melidaradoncic@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Melida",
                            IsEmployee = false,
                            IsWorking = false,
                            LastName = "Radoncic",
                            LockoutEnabled = false,
                            LongTerm = false,
                            NormalizedEmail = "MELIDARADONCIC@HOTMAIL.COM",
                            NormalizedUserName = "MELIDARADONCIC@HOTMAIL.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "408f8500-25c2-4a16-bf90-a3953a6d3b2c",
                            ShortTerm = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2022, 7, 10, 23, 26, 44, 47, DateTimeKind.Utc).AddTicks(512),
                            UserName = "melidaradoncic@hotmail.com"
                        });
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.UserCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCalendars");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "eb963452-683c-40be-8777-97d5a90792a1",
                            RoleId = "578861f8-d0a3-4a8a-81f5-488b37fdf204"
                        },
                        new
                        {
                            UserId = "eb963452-683c-40be-8777-97d5a90792a1",
                            RoleId = "c3d77b2f-6f66-4681-9f54-fc746f48d669"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SystemDuo.Core.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SystemDuo.Core.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SystemDuo.Core.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SystemDuo.Core.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Employee", b =>
                {
                    b.HasOne("SystemDuo.Core.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.ApplicantSkills", b =>
                {
                    b.HasOne("SystemDuo.Core.Domain.Entities.Skills", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemDuo.Core.Domain.Entities.User", null)
                        .WithMany("CandidateSkills")
                        .HasForeignKey("UserId");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.Application", b =>
                {
                    b.HasOne("SystemDuo.Core.Domain.Entities.Company", null)
                        .WithMany("Applications")
                        .HasForeignKey("CompanyId");

                    b.HasOne("SystemDuo.Core.Domain.Entities.Job", "Job")
                        .WithMany("CandidateApplications")
                        .HasForeignKey("JobId");

                    b.HasOne("SystemDuo.Core.Domain.Entities.User", "User")
                        .WithMany("CandidateApplications")
                        .HasForeignKey("UserId");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.ApplicationComments", b =>
                {
                    b.HasOne("SystemDuo.Core.Domain.Entities.Application", "Application")
                        .WithMany("ApplicationComments")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("SystemDuo.Core.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.Company", b =>
                {
                    b.HasOne("SystemDuo.Core.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemDuo.Core.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.EmployeeJob", b =>
                {
                    b.HasOne("SystemDuo.Core.Domain.Entities.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemDuo.Core.Domain.Entities.User", "User")
                        .WithMany("EmployeeJob")
                        .HasForeignKey("UserId");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.EmployeeRecension", b =>
                {
                    b.HasOne("SystemDuo.Core.Domain.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemDuo.Core.Domain.Entities.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.Job", b =>
                {
                    b.HasOne("SystemDuo.Core.Domain.Entities.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId");

                    b.HasOne("SystemDuo.Core.Domain.Entities.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemDuo.Core.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("AssignedTo");

                    b.Navigation("Company");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.JobSkills", b =>
                {
                    b.HasOne("SystemDuo.Core.Domain.Entities.Job", null)
                        .WithMany("JobSkills")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemDuo.Core.Domain.Entities.Skills", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.User", b =>
                {
                    b.HasOne("SystemDuo.Core.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.UserCalendar", b =>
                {
                    b.HasOne("SystemDuo.Core.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("SystemDuo.Core.Domain.Entities.Role", "Role")
                        .WithMany("Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemDuo.Core.Domain.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.Application", b =>
                {
                    b.Navigation("ApplicationComments");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.Company", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.Job", b =>
                {
                    b.Navigation("CandidateApplications");

                    b.Navigation("JobSkills");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.Role", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("SystemDuo.Core.Domain.Entities.User", b =>
                {
                    b.Navigation("CandidateApplications");

                    b.Navigation("CandidateSkills");

                    b.Navigation("EmployeeJob");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
